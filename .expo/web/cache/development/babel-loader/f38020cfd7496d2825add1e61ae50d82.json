{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/vic/reactnative/shop/components/Authentication/AuthDemo.js\";\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport LoginScreen from \"./LoginScreen\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SignUpScreen from \"./SignUpScreen\";\nimport SignUpCompleted from \"./SignUpCompleted\";\nimport * as SecureStore from 'expo-secure-store';\nimport LoadingScreen from \"./LoadingScreen\";\nimport TodoApp from \"./TodoApp\";\nimport global from \"../History/global\";\nimport { getOrientationAsync } from 'expo/build/ScreenOrientation/ScreenOrientation';\nvar Stack = createStackNavigator();\nvar secureStoreTokenName = \"demoAppJWT2\";\n\nvar AuthDemo = function (_Component) {\n  _inherits(AuthDemo, _Component);\n\n  function AuthDemo(_props) {\n    var _this;\n\n    _classCallCheck(this, AuthDemo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthDemo).call(this, _props));\n\n    _this.onLoginReceiveJWT = function (responseJWT) {\n      SecureStore.setItemAsync(secureStoreTokenName, responseJWT).then(function (response) {\n        console.log(response);\n\n        _this.setState({\n          activeJWT: responseJWT,\n          isCheckingTokenStorage: false\n        });\n      });\n    };\n\n    _this.authLogic = function () {\n      var authScreens = React.createElement(React.Fragment, null, React.createElement(Stack.Screen, {\n        name: \"Login\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        }\n      }, function (props) {\n        return React.createElement(LoginScreen, _extends({}, props, {\n          onLoginReceiveJWT: _this.onLoginReceiveJWT,\n          apiURI: _this.props.apiURI,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          }\n        }));\n      }), React.createElement(Stack.Screen, {\n        name: \"Signup\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        }\n      }, function (props) {\n        return React.createElement(SignUpScreen, _extends({}, props, {\n          apiURI: _this.props.apiURI,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          }\n        }));\n      }), React.createElement(Stack.Screen, {\n        name: \"SignupCompleted\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        }\n      }, function (props) {\n        return React.createElement(SignUpCompleted, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          }\n        }));\n      }));\n      var app = React.createElement(Stack.Screen, {\n        name: \"TodoApp\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        }\n      }, function (props) {\n        return React.createElement(TodoApp, _extends({}, props, {\n          jwt: _this.state.activeJWT,\n          apiURI: _this.props.apiURI,\n          onLogout: _this.onLogout,\n          user: _this.state.user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          }\n        }));\n      });\n      var checkingForTokenStorage = React.createElement(Stack.Screen, {\n        name: \"Loading\",\n        component: LoadingScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        }\n      });\n\n      if (_this.state.isCheckingTokenStorage) {\n        console.log('Checking is token stored');\n        return checkingForTokenStorage;\n      } else {\n        if (_this.state.activeJWT != null) {\n          console.log('JWT Token found, displaying application logged in views');\n          return app;\n        } else {\n          console.log('JWT Token not found, displaying application authentication views');\n          return authScreens;\n        }\n      }\n\n      console.error('Incorrect authLogic function processing');\n    };\n\n    _this.onLogout = function () {\n      console.log(\"Logout clicked\");\n\n      _this.setState({\n        activeJWT: null\n      });\n\n      SecureStore.deleteItemAsync(secureStoreTokenName);\n    };\n\n    _this.state = {\n      isCheckingTokenStorage: true,\n      activeJWT: null\n    };\n    global.onLogout = _this.onLogout.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AuthDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      SecureStore.getItemAsync(secureStoreTokenName).then(function (response) {\n        console.log(\"SecureStore.getItemAsync success\");\n\n        _this2.setState({\n          activeJWT: response,\n          isCheckingTokenStorage: false\n        });\n      }).catch(function (error) {\n        console.log(\"SecureStore.getItemAsync error\");\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        }\n      }, React.createElement(Stack.Navigator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        }\n      }, this.authLogic()));\n    }\n  }]);\n\n  return AuthDemo;\n}(Component);\n\nexport { AuthDemo as default };","map":{"version":3,"sources":["/home/vic/reactnative/shop/components/Authentication/AuthDemo.js"],"names":["React","Component","LoginScreen","NavigationContainer","createStackNavigator","SignUpScreen","SignUpCompleted","SecureStore","LoadingScreen","TodoApp","global","getOrientationAsync","Stack","secureStoreTokenName","AuthDemo","props","onLoginReceiveJWT","responseJWT","setItemAsync","then","response","console","log","setState","activeJWT","isCheckingTokenStorage","authLogic","authScreens","headerShown","apiURI","app","state","onLogout","user","checkingForTokenStorage","error","deleteItemAsync","bind","getItemAsync","catch","flex"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Text, View, ActivityIndicator } from 'react-native'\nimport LoginScreen from './LoginScreen'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport SignUpScreen from './SignUpScreen'\nimport SignUpCompleted from './SignUpCompleted'\nimport * as SecureStore from 'expo-secure-store'\nimport LoadingScreen from './LoadingScreen'\nimport TodoApp from './TodoApp'\nimport global from '../History/global'\nimport { getOrientationAsync } from 'expo/build/ScreenOrientation/ScreenOrientation'\n\nconst Stack = createStackNavigator();\nconst secureStoreTokenName = \"demoAppJWT2\";\n\nexport default class AuthDemo extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCheckingTokenStorage: true,\n      activeJWT: null,\n    };\n    global.onLogout = this.onLogout.bind(this)\n  }\n  componentDidMount() {\n    // Check for stored JWT when the application loads\n    SecureStore.getItemAsync(secureStoreTokenName)\n      .then(response => {\n        console.log(\"SecureStore.getItemAsync success\")\n        this.setState({ activeJWT: response, isCheckingTokenStorage: false })\n        //global.loginClick();\n      })\n      .catch(error => {\n        console.log(\"SecureStore.getItemAsync error\")\n        console.log(error);\n      });\n  }\n\n\n\n  onLoginReceiveJWT = (responseJWT) => {\n    // Deal with successful login by storing the token into secure store\n    SecureStore.setItemAsync(secureStoreTokenName, responseJWT)\n      .then(response => {\n        console.log(response);\n        this.setState({ activeJWT: responseJWT, isCheckingTokenStorage: false })\n      })\n  }\n\n\n\n  authLogic = () => {\n    const authScreens = (\n      <>\n        <Stack.Screen\n          name=\"Login\"\n          options={{\n            headerShown: false,\n          }}\n        >\n          {props => <LoginScreen {...props} onLoginReceiveJWT={this.onLoginReceiveJWT} apiURI={this.props.apiURI}></LoginScreen>}\n        </Stack.Screen>\n        <Stack.Screen\n          name=\"Signup\"\n          options={{\n            headerShown: false,\n          }}\n        >\n          {props => <SignUpScreen {...props} apiURI={this.props.apiURI}></SignUpScreen>}\n        </Stack.Screen>\n        <Stack.Screen\n          name=\"SignupCompleted\"\n          options={{\n            headerShown: false,\n          }}\n        >\n          {props => <SignUpCompleted {...props}></SignUpCompleted>}\n        </Stack.Screen>\n      </>\n    );\n\n    const app = (\n      <Stack.Screen\n        name=\"TodoApp\"\n        options={{\n          headerShown: false,\n        }}>\n        {props => <TodoApp\n          {...props}\n          jwt={this.state.activeJWT}\n          apiURI={this.props.apiURI}\n          onLogout={this.onLogout}\n          user={this.state.user}\n        ></TodoApp>}\n      </Stack.Screen>\n    )\n\n\n\n    const checkingForTokenStorage = (\n      <Stack.Screen name=\"Loading\" component={LoadingScreen} />\n    )\n\n    if (this.state.isCheckingTokenStorage) {\n      console.log('Checking is token stored');\n      return checkingForTokenStorage;\n    }\n    else {\n      if (this.state.activeJWT != null) {\n        console.log('JWT Token found, displaying application logged in views');\n        return app;\n      }\n      else {\n        console.log('JWT Token not found, displaying application authentication views');\n        return authScreens;\n      }\n    }\n    console.error('Incorrect authLogic function processing');\n  }\n\n  onLogout = () => {\n    console.log(\"Logout clicked\");\n    this.setState({ activeJWT: null });\n    SecureStore.deleteItemAsync(secureStoreTokenName);\n  }\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n\n        <Stack.Navigator>\n          {this.authLogic()}\n        </Stack.Navigator>\n\n      </View>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}