{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/vic/reactnative/shop/AuthDemo.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SignUpScreen from \"./components/SignUpScreen\";\nimport SignUpCompleted from \"./components/SignUpCompleted\";\nimport * as SecureStore from 'expo-secure-store';\nimport LoadingScreen from \"./components/LoadingScreen\";\nimport TodoApp from \"./components/TodoApp\";\nvar Stack = createStackNavigator();\nvar secureStoreTokenName = \"demoAppJWT2\";\n\nvar AuthDemo = function (_Component) {\n  _inherits(AuthDemo, _Component);\n\n  var _super = _createSuper(AuthDemo);\n\n  function AuthDemo(_props) {\n    var _this;\n\n    _classCallCheck(this, AuthDemo);\n\n    _this = _super.call(this, _props);\n\n    _this.onLoginReceiveJWT = function (responseJWT) {\n      SecureStore.setItemAsync(secureStoreTokenName, responseJWT).then(function (response) {\n        console.log(response);\n\n        _this.setState({\n          activeJWT: responseJWT,\n          isCheckingTokenStorage: false\n        });\n      });\n    };\n\n    _this.authLogic = function () {\n      var authScreens = React.createElement(React.Fragment, null, React.createElement(Stack.Screen, {\n        name: \"Login\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, function (props) {\n        return React.createElement(LoginScreen, _extends({}, props, {\n          onLoginReceiveJWT: _this.onLoginReceiveJWT,\n          apiURI: _this.props.apiURI,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 22\n          }\n        }));\n      }), React.createElement(Stack.Screen, {\n        name: \"Signup\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, function (props) {\n        return React.createElement(SignUpScreen, _extends({}, props, {\n          apiURI: _this.props.apiURI,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 22\n          }\n        }));\n      }), React.createElement(Stack.Screen, {\n        name: \"SignupCompleted\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }, function (props) {\n        return React.createElement(SignUpCompleted, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 22\n          }\n        }));\n      }));\n      var app = React.createElement(Stack.Screen, {\n        name: \"TodoApp\",\n        options: {\n          headerShown: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }\n      }, function (props) {\n        return React.createElement(TodoApp, _extends({}, props, {\n          jwt: _this.state.activeJWT,\n          apiURI: _this.props.apiURI,\n          onLogout: _this.onLogout,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 22\n          }\n        }));\n      });\n      var checkingForTokenStorage = React.createElement(Stack.Screen, {\n        name: \"Loading\",\n        component: LoadingScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      });\n\n      if (_this.state.isCheckingTokenStorage) {\n        console.log('Checking is token stored');\n        return checkingForTokenStorage;\n      } else {\n        if (_this.state.activeJWT != null) {\n          console.log('JWT Token found, displaying application logged in views');\n          return app;\n        } else {\n          console.log('JWT Token not found, displaying application authentication views');\n          return authScreens;\n        }\n      }\n\n      console.error('Incorrect authLogic function processing');\n    };\n\n    _this.onLogout = function () {\n      console.log(\"Logout clicked\");\n\n      _this.setState({\n        activeJWT: null\n      });\n\n      SecureStore.deleteItemAsync(secureStoreTokenName);\n    };\n\n    _this.state = {\n      isCheckingTokenStorage: true,\n      activeJWT: null\n    };\n    return _this;\n  }\n\n  _createClass(AuthDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      SecureStore.getItemAsync(secureStoreTokenName).then(function (response) {\n        console.log(\"SecureStore.getItemAsync success\");\n\n        _this2.setState({\n          activeJWT: response,\n          isCheckingTokenStorage: false\n        });\n      }).catch(function (error) {\n        console.log(\"SecureStore.getItemAsync error\");\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      }, React.createElement(NavigationContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, React.createElement(Stack.Navigator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }, this.authLogic())));\n    }\n  }]);\n\n  return AuthDemo;\n}(Component);\n\nexport { AuthDemo as default };","map":{"version":3,"sources":["/home/vic/reactnative/shop/AuthDemo.js"],"names":["React","Component","LoginScreen","NavigationContainer","createStackNavigator","SignUpScreen","SignUpCompleted","SecureStore","LoadingScreen","TodoApp","Stack","secureStoreTokenName","AuthDemo","props","onLoginReceiveJWT","responseJWT","setItemAsync","then","response","console","log","setState","activeJWT","isCheckingTokenStorage","authLogic","authScreens","headerShown","apiURI","app","state","onLogout","checkingForTokenStorage","error","deleteItemAsync","getItemAsync","catch","flex"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Text, View, ActivityIndicator } from 'react-native'\nimport LoginScreen from './components/LoginScreen'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport SignUpScreen from './components/SignUpScreen'\nimport SignUpCompleted from './components/SignUpCompleted'\nimport * as SecureStore from 'expo-secure-store'\nimport LoadingScreen from './components/LoadingScreen'\nimport TodoApp from './components/TodoApp'\n\nconst Stack = createStackNavigator();\nconst secureStoreTokenName = \"demoAppJWT2\";   \n\nexport default class AuthDemo extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCheckingTokenStorage: true,\n      activeJWT: null\n    };\n  }\n\n  componentDidMount() {\n    // Check for stored JWT when the application loads\n    SecureStore.getItemAsync(secureStoreTokenName)\n      .then(response => {\n        console.log(\"SecureStore.getItemAsync success\")        \n        this.setState({ activeJWT: response, isCheckingTokenStorage: false })\n      })\n      .catch(error => {\n        console.log(\"SecureStore.getItemAsync error\")\n        console.log(error);\n      });\n  }\n\n  \n  onLoginReceiveJWT = (responseJWT) => {\n    // Deal with successful login by storing the token into secure store\n    SecureStore.setItemAsync(secureStoreTokenName, responseJWT)\n      .then(response => {\n        console.log(response);\n        this.setState({ activeJWT: responseJWT, isCheckingTokenStorage: false })\n      })    \n  }\n\n  \n\n  authLogic = () => {\n    const authScreens = (\n      <>\n        <Stack.Screen\n          name=\"Login\"\n          options={{\n            headerShown: false,\n          }}\n        >\n          { props => <LoginScreen {...props} onLoginReceiveJWT={ this.onLoginReceiveJWT } apiURI={ this.props.apiURI }></LoginScreen> }\n        </Stack.Screen>\n        <Stack.Screen\n          name=\"Signup\"\n          options={{\n            headerShown: false,\n          }}\n        >\n          { props => <SignUpScreen {...props} apiURI={ this.props.apiURI }></SignUpScreen>}\n        </Stack.Screen>\n        <Stack.Screen\n          name=\"SignupCompleted\"\n          options={{\n            headerShown: false,\n          }}\n        >\n          { props => <SignUpCompleted {...props}></SignUpCompleted>}\n        </Stack.Screen>\n      </>\n    );\n\n    const app = (\n      <Stack.Screen \n        name=\"TodoApp\" \n        options={{\n          headerShown: false,\n        }}>\n          { props => <TodoApp \n                        {...props} \n                        jwt={ this.state.activeJWT } \n                        apiURI={ this.props.apiURI }\n                        onLogout={ this.onLogout }\n                      ></TodoApp>}\n      </Stack.Screen>\n    )\n\n    \n\n    const checkingForTokenStorage = (\n      <Stack.Screen name=\"Loading\" component={LoadingScreen} />\n    )\n\n    if(this.state.isCheckingTokenStorage)\n    {\n      console.log('Checking is token stored');\n      return checkingForTokenStorage;\n    }\n    else\n    {\n      if(this.state.activeJWT != null)\n      {\n        console.log('JWT Token found, displaying application logged in views');\n        return app;\n      }\n      else\n      {\n        console.log('JWT Token not found, displaying application authentication views');\n        return authScreens;\n      }\n    }\n    console.error('Incorrect authLogic function processing');\n  }\n\n  onLogout = () => {\n    console.log(\"Logout clicked\");\n    this.setState({ activeJWT: null });\n    SecureStore.deleteItemAsync(secureStoreTokenName);\n  }\n\n  render() {\n    return (\n      <View style={{ flex: 1}}>\n        <NavigationContainer>\n          <Stack.Navigator>\n            { this.authLogic() }\n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}