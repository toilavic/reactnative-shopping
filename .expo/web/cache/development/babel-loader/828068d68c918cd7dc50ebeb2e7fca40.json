{"ast":null,"code":"import * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useFocusEffect(callback) {\n  var navigation = useNavigation();\n  React.useEffect(function () {\n    var isFocused = false;\n    var cleanup;\n\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [callback, navigation]);\n}","map":{"version":3,"sources":["useFocusEffect.tsx"],"names":["navigation","useNavigation","React","isFocused","cleanup","callback","unsubscribeFocus","unsubscribeBlur"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,aAAA;AAWA,eAAe,SAAA,cAAA,CAAA,QAAA,EAAkD;AAC/D,MAAMA,UAAU,GAAGC,aAAnB,EAAA;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIC,SAAS,GAAb,KAAA;AACA,QAFoB,OAEpB;;AAGA,QAAIH,UAAU,CAAd,SAAIA,EAAJ,EAA4B;AAC1BI,MAAAA,OAAO,GAAGC,QAAVD,EAAAA;AACAD,MAAAA,SAAS,GAATA,IAAAA;AACD;;AAED,QAAMG,gBAAgB,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAgC,YAAM;AAG7D,UAAA,SAAA,EAAe;AACb;AACD;;AAED,UAAIF,OAAO,KAAX,SAAA,EAA2B;AACzBA,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGC,QAAVD,EAAAA;AACAD,MAAAA,SAAS,GAATA,IAAAA;AAZF,KAAyB,CAAzB;AAeA,QAAMI,eAAe,GAAG,UAAU,CAAV,WAAA,CAAA,MAAA,EAA+B,YAAM;AAC3D,UAAIH,OAAO,KAAX,SAAA,EAA2B;AACzBA,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAPA,SAAAA;AACAD,MAAAA,SAAS,GAATA,KAAAA;AANF,KAAwB,CAAxB;AASA,WAAO,YAAM;AACX,UAAIC,OAAO,KAAX,SAAA,EAA2B;AACzBA,QAAAA,OAAO;AACR;;AAEDE,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AANjB,KAAA;AAlCFL,GAAAA,EA0CG,CAAA,QAAA,EA1CHA,UA0CG,CA1CHA;AA2CD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(callback: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [callback, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}