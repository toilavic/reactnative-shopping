{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/vic/reactnative/shop/tutorials/step10-imagepicker-and-multipart-send/ImagePickAndSend.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport * as ImagePicker from 'expo-image-picker';\nimport axios from 'axios';\n\nvar ImagePickAndSend = function (_Component) {\n  _inherits(ImagePickAndSend, _Component);\n\n  var _super = _createSuper(ImagePickAndSend);\n\n  function ImagePickAndSend(props) {\n    var _this;\n\n    _classCallCheck(this, ImagePickAndSend);\n\n    _this = _super.call(this, props);\n\n    _this.openImagePickerAsync = function _callee() {\n      var permissionResult, pickerResult, fileNameSplit, fileName, postForm;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 2:\n              permissionResult = _context.sent;\n\n              if (!(permissionResult.granted === false)) {\n                _context.next = 6;\n                break;\n              }\n\n              alert(\"Permission to access camera roll is required!\");\n              return _context.abrupt(\"return\");\n\n            case 6:\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n            case 8:\n              pickerResult = _context.sent;\n              console.log(pickerResult);\n\n              if (!(pickerResult.cancelled == true)) {\n                _context.next = 13;\n                break;\n              }\n\n              alert('Image picker cancelled or failed');\n              return _context.abrupt(\"return\");\n\n            case 13:\n              fileNameSplit = pickerResult.uri.split('/');\n              fileName = fileNameSplit[fileNameSplit.length - 1];\n              postForm = new FormData();\n              postForm.append(_this.props.imageFormName, {\n                uri: pickerResult.uri,\n                name: fileName,\n                type: 'image/jpeg'\n              });\n              postForm.append('foo', 'bar');\n\n              _this.setState({\n                isSubmitting: true\n              });\n\n              axios({\n                method: 'post',\n                url: _this.props.targetURI,\n                data: postForm,\n                headers: {\n                  'Content-Type': 'multipart/form-data'\n                }\n              }).then(function (response) {\n                console.log(response);\n                alert(\"Image upload completed\");\n\n                _this.setState({\n                  isSubmitting: false\n                });\n              }).catch(function (response) {\n                console.log(response);\n                alert(\"Image upload failed\");\n\n                _this.setState({\n                  isSubmitting: false\n                });\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      isSubmitting: false\n    };\n    return _this;\n  }\n\n  _createClass(ImagePickAndSend, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, \" Image Picker \"), this.state.isSubmitting ? React.createElement(ActivityIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 37\n        }\n      }) : React.createElement(TouchableOpacity, {\n        onPress: this.openImagePickerAsync,\n        style: {\n          borderWidth: 1,\n          borderColor: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }, \"Pick a photo and start upload\")));\n    }\n  }]);\n\n  return ImagePickAndSend;\n}(Component);\n\nexport { ImagePickAndSend as default };","map":{"version":3,"sources":["/home/vic/reactnative/shop/tutorials/step10-imagepicker-and-multipart-send/ImagePickAndSend.js"],"names":["React","Component","ImagePicker","axios","ImagePickAndSend","props","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","console","log","cancelled","fileNameSplit","uri","split","fileName","length","postForm","FormData","append","imageFormName","name","type","setState","isSubmitting","method","url","targetURI","data","headers","then","response","catch","state","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Text, View, TouchableOpacity, ActivityIndicator } from 'react-native'\nimport * as ImagePicker from 'expo-image-picker'\nimport axios from 'axios'\n\nexport default class ImagePickAndSend extends Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      isSubmitting: false,\n    }\n  }\n\n  openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert(\"Permission to access camera roll is required!\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    console.log(pickerResult);\n\n    if(pickerResult.cancelled == true)\n    {\n      alert('Image picker cancelled or failed');\n      return;\n    }\n\n    const fileNameSplit = pickerResult.uri.split('/');\n    const fileName = fileNameSplit[fileNameSplit.length - 1];\n\n    let postForm = new FormData();\n    postForm.append(this.props.imageFormName, {\n      uri: pickerResult.uri,\n      name: fileName,\n      type: 'image/jpeg'\n    });\n    postForm.append('foo', 'bar');\n    this.setState({ isSubmitting: true })\n    axios({\n      method: 'post',\n      url: this.props.targetURI,\n      data: postForm,\n      headers: { 'Content-Type': 'multipart/form-data' }\n      })\n      .then(response => {\n          //handle success\n          console.log(response);\n          alert(\"Image upload completed\");\n          this.setState({ isSubmitting: false })\n      })\n      .catch(response => {\n          //handle error\n          console.log(response);\n          alert(\"Image upload failed\");\n          this.setState({ isSubmitting: false })\n      });\n  }\n\n  render() {\n    return (\n      <View>\n        <Text> Image Picker </Text>\n\n        { this.state.isSubmitting ? <ActivityIndicator /> :\n          <TouchableOpacity onPress={this.openImagePickerAsync} style={{ borderWidth: 1, borderColor: 'black'}}>\n          <Text>Pick a photo and start upload</Text>\n        </TouchableOpacity>\n        }\n\n      </View>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}